from  scipy import *
from  pylab import *
from datetime import *
from astral import *
import pandas as pd

def testfile():
    file=open('bird_jan25jan16fix.dat','r')
    return file

lista=list(testfile())

def funccc(lista,tidzon=00):
    class digint(int):
        """
        This is a class for comparing integer hundreds thousands etc. seperately
        """
        def __init__(self, tal):
            n=len(str(tal))
            if n>6:
                raise ValueError("This number is to large")
            self.__n__=n
#            for k in range(n):
#                plats=str(tal)[k] func
#                self.10^k=int(plats)*10^k
            if n>=1:
                self.first=int(str(tal)[0])
            if n>=2:
                self.second=int(str(tal)[1])
            if n>=3:
                self.third=int(str(tal)[2])
            if n>=4:
                self.fourth=int(str(tal)[3])
            if n>=5:
                self.fifth=int(str(tal)[4])
            if n==6:
                self.sixth=int(str(tal)[5])
        def fixa(self,innan,efter):
            storin=innan.__n__-self.__n__
            storef=efter.__n__-self.__n__
            if self<innan:
                self1=innan.first*10**self.__n__+self
                if self1<innan:
                    self2=efter.first*10**self.__n__+self
                    if self2<innan:
                        self3=efter.first*10**(self.__n__+1)+efter.second*10**self.__n__+self
                        if self3>efter:
                            self4=innan.first*10**(self.__n__)+innan.second*10**self.__n__+self
                            return self4
                        else:
                            return self3
                    else:
                        return self2
                else:
                    return self1
        
    lista_tid=[k[0:26] for k in lista]
    lista_antal=[int(k[29:-2]) for k in lista]
    for i in range(len(lista_antal)):
        if lista_antal[i-1]>lista_antal[i]<lista_antal[i+1] and lista_antal[i]!=0:
            innan=digint(lista_antal[i-1])
            fel=digint(lista_antal[i])
            efter=digint(lista_antal[i+1])
            lista_antal[i]=fel.fixa(innan,efter)
    
    antal=[0]+list(diff(lista_antal))
    movement=[0 if k<0 else k for k in antal]
    df=pd.DataFrame()
    df['datetime'] = lista_tid
    df['datetime'] = pd.to_datetime(df['datetime'])
    df.index = df['datetime']
    df['movement'] = movement
#    change timezone
    
#    Now input + plot
    def DataTillDiagram():
        start_år = int(input("Start år: "))
        start_månad = int(input("Start månad: "))
        start_dag = int(input("Start dag: "))
        slut_år = int(input("Slut år: "))
        slut_månad = int(input("Slut månad: "))
        slut_dag = int(input("Slut dag: "))
        intervall_sort=input("Ska intervallet vara i D(dag) eller min(minuter) eller M(månader)? ")
        intervall_tid = input("Intervall (hur många dagar mellan punkterna: ")
        start=tm.date(start_år,start_månad,start_dag)
        slut=tm.date(slut_år,slut_månad,slut_dag)
        intervall_total=intervall_tid+intervall_sort
        
        intervall=df.resample('intervall_total')
        return intervall
    print(df.resample('2d').sum())        




############################################################################





lista_tid=[k[0:26] for k in lista]
lista_antal=[int(k[29:-2]) for k in lista]

antal4=[lista_antal[i]-lista_antal[i-1] if lista_antal[i]>=lista_antal[i-1] else (lista_antal[i+1]-lista_antal[i-1] if lista_antal[i+1]>=lista_antal[i-1] else 0) for i in range(len(lista_antal))]

df=pd.DataFrame()
df['datetime'] = lista_tid
df['datetime'] = pd.to_datetime(df['datetime'])
df.index = df['datetime']
df['movement'] = antal4
Our_data=df.resample('2min').sum()  # Our_data ger data summerad varannan minut, om några värden blir none kan man ändra till ex. 5min istället
#print(df.resample('2min').sum())



#### Class digint
class digint(int):
    """
    This is a class for comparing integer hundreds thousands etc. seperately
    """
    def __init__(self, tal):
        n=len(str(tal))
        if n>6:
            raise ValueError("This number is to large")
        self.__n__=n
                if n>=1:
            self.en=int(str(tal)[-1])
        if n>=2:
            self.ti=int(str(tal)[-2])*10
        if n>=3:
            self.ha=int(str(tal)[-3])*100
        if n>=4:
            self.tn=int(str(tal)[-4])*1000
        if n>=5:
            self.ttn=int(str(tal)[-5])*10000
        if n==6:
            self.htn=int(str(tal)[-6])*100000
        self.tal=tal
