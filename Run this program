# -*- coding: utf-8 -*-
"""
Created on Sat Jan 13 17:52:52 2018
@author: marte
"""
from pytz import * #timezone
from  pylab import * #plot
from datetime import * #time
from astral import * #sunlight
import pandas as pd #create table

def funccc():
    
    #imports the code for the input box
    import dropdown
    
    # runs the code from dropdown
    if __name__ == '__main__':
        main()  
    
    #changing the user input into input we can use
    dict_Month = {'January': '01' ,'February': '02','Mars': '03','April': '04', 'May': '05', 'June': '06', 'July': '07', 'August': '08', 'September': '09', 'October': '10', 'November': '11', 'December': '12'}
    dict_Interval = {'Day': 'd','Hour': 'h','Minute': 'min'}
    start_time=datetime(int(year_start),int(dict_Month[month_start]),int(day_start))
    end_time=datetime(int(year_end),int(dict_Month[month_end]),int(day_end))
    end_time=end_time+timedelta(days=1)
    intervallet=interval+dict_Interval[interval_type]
    
    # reads the file into python
    def testfile():
        file=open('bird_jan25jan16fix.dat','r')
        return file
    
    #puts every line into list and slices each entry do get time and data seperate
    lista=list(testfile())
    lista_tid=[k[0:26] for k in lista]
    lista_antal=[int(k[29:-2]) for k in lista]
    
    #fix for error where digits are missin in the data
    for i in range(len(lista_antal)):
        if lista_antal[i-1]>lista_antal[i]<lista_antal[i+1]:
            lista_antal[i]=lista_antal[i-1]
    
    #changes data to differens(actions per time interval) instead of sum
    antal=[0]+list(diff(lista_antal))
    movement=[0 if k<0 else k for k in antal] # fix for error counter reset
    movement=[4 if k>10 else k for k in movement] # fix for "biological" errors, impossibly large
    
    #creating a dataframe(table)
    df=pd.DataFrame()
    df['datetime'] = lista_tid
    df['datetime'] = pd.to_datetime(df['datetime'])
    df.index = df['datetime']
    df['movement'] = movement
    df_utc=df.tz_localize('UTC', level=0) #sets timezone as UTC
    df_timezone=df_utc.tz_convert('Europe/Copenhagen') #changes the timezone
    DF=df_timezone.resample(intervallet).sum() #sums data in desired interval
    
    #creates strings for slicing our dataframe
    str_start=year_start+'-'+dict_Month[month_start]+'-'+day_start
    str_slut=year_end+'-'+dict_Month[month_end]+'-'+day_end
    #slices the datafram from start date to end date
    ad=DF[str_start:str_slut]
    #takes index(time) as x-values and the corresponding data as y-values
    x=ad.index
    y=ad['movement']
    
    #function for changing the background when the sun is up
    def soliga_timmar(datum):
        astral=Astral()
        city_name = 'Copenhagen'
        city = astral[city_name]
        sun = city.sun(datum, local=True)    
        sunset=(sun['sunset'])
        sunrise=(sun['sunrise'])
        plt.axvspan(sunset, sunrise, facecolor='#eef239', alpha=0.7)
    
    #start and end as datetime objects
    start=start_time
    slut=end_time
    
    #a loop for plotting with the sun function every day of the period
    if interval_type!='Day':
        while True:
            soliga_timmar(start)
            start+=timedelta(days=1)
            if start==slut:
                break            
            if start>slut:
                break
    
    #creates a bar plot
    bar(x,y)
    show()
funccc()
